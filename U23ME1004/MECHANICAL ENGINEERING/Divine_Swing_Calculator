import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class DivineJavaCalculator extends JFrame implements ActionListener {
    private JTextField textField;
    private String num1 = "", num2 = "", operator = "";

    public DivineJavaCalculator() {
        setTitle("Divine_java_calculator"); // Set title
        setSize(350, 450);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Set background color
        getContentPane().setBackground(Color.BLACK);

        // Display Field
        textField = new JTextField();
        textField.setFont(new Font("Arial", Font.BOLD, 24));
        textField.setEditable(false);
        textField.setHorizontalAlignment(JTextField.RIGHT);
        add(textField, BorderLayout.NORTH);

        // Panel for Buttons
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(4, 4, 5, 5));
        panel.setBackground(Color.BLACK); // Set panel background to red

        // Button Labels
        String[] buttons = {
                "7", "8", "9", "/",
                "4", "5", "6", "*",
                "1", "2", "3", "-",
                "C", "0", "=", "+"
        };

        // Colors for different buttons
        Color numColor = new Color(173, 216, 230);  // Light Blue for numbers
        Color opColor = new Color(255, 165, 0);     // Orange for operators
        Color eqColor = new Color(50, 205, 50);     // Green for '='
        Color clrColor = new Color(220, 20, 60);    // Red for 'C'

        for (String text : buttons) {
            JButton button = new JButton(text);
            button.setFont(new Font("Arial", Font.BOLD, 20));
            button.addActionListener(this);
            button.setOpaque(true);
            button.setBorderPainted(false);

            // Assign colors
            if (text.matches("[0-9]")) {
                button.setBackground(numColor);
            } else if (text.equals("=")) {
                button.setBackground(eqColor);
            } else if (text.equals("C")) {
                button.setBackground(clrColor);
                button.setForeground(Color.WHITE);
            } else {
                button.setBackground(opColor);
            }

            panel.add(button);
        }

        add(panel, BorderLayout.CENTER);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();

        if (command.matches("[0-9]")) {
            if (operator.isEmpty()) {
                num1 += command;
            } else {
                num2 += command;
            }
            textField.setText(num1 + operator + num2);
        } else if (command.matches("[/*\\-+]")) {
            if (!num1.isEmpty()) {
                operator = command;
                textField.setText(num1 + operator);
            }
        } else if (command.equals("=")) {
            if (!num1.isEmpty() && !num2.isEmpty()) {
                double result = calculate(Double.parseDouble(num1), Double.parseDouble(num2), operator);
                textField.setText(String.valueOf(result));
                num1 = String.valueOf(result);
                num2 = "";
                operator = "";
            }
        } else if (command.equals("C")) {
            num1 = num2 = operator = "";
            textField.setText("");
        }
    }

    private double calculate(double a, double b, String op) {
        switch (op) {
            case "+": return a + b;
            case "-": return a - b;
            case "*": return a * b;
            case "/": return b != 0 ? a / b : 0; // Handle division by zero
            default: return 0;
        }
    }

    public static void main(String[] args) {
        new DivineJavaCalculator();
    }
}
